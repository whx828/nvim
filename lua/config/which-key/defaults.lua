return {
  mode = { "n", "v" },
  { "<leader>q", ":confirm q<CR>", desc = "Quit" },
  { "<leader>h", ":nohlsearch<CR>", desc = "No Highlight" },
  { "<leader>p", require("telescope.builtin").lsp_document_symbols, desc = "Document Symbols" },
  { "<leader>P", require("telescope.builtin").lsp_dynamic_workspace_symbols, desc = "Workspace Symbols" },
  { "<leader>o", require("telescope.builtin").buffers, desc = "Open Buffer" },
  { "<leader>w", "<cmd>noautocmd w<cr>", desc = "Save without formatting (noautocmd)" },

  { "<leader>s", desc = "+Search" },
  { "<leader>sa", "<cmd>Telescope ast_grep<cr>", desc = "[S]earch with [A]ST-grep" },
  { "<leader>sf", "<cmd>Telescope find_files<cr>", desc = "Find File (CWD)" },
  { "<leader>sh", "<cmd>Telescope help_tags<cr>", desc = "Find Help" },
  { "<leader>sH", "<cmd>Telescope highlights<cr>", desc = "Find highlight groups" },
  { "<leader>sM", "<cmd>Telescope man_pages<cr>", desc = "Man Pages" },
  { "<leader>so", "<cmd>Telescope oldfiles<cr>", desc =  "Open Recent File" },
  { "<leader>sR", "<cmd>Telescope registers<cr>", desc = "Registers" },
  { "<leader>st", "<cmd>Telescope live_grep<cr>", desc = "Live Grep" },
  { "<leader>sT", "<cmd>Telescope grep_string<cr>", desc = "Grep String" },
  { "<leader>sk", "<cmd>Telescope keymaps<cr>", desc = "Keymaps" },
  { "<leader>sC", "<cmd>Telescope commands<cr>", desc = "Commands" },
  { "<leader>sl", "<cmd>Telescope resume<cr>", desc = "Resume last search" },
  { "<leader>sc", "<cmd>Telescope git_commits<cr>", desc = "Git commits" },
  { "<leader>sB", "<cmd>Telescope git_branches<cr>", desc = "Git branches" },
  { "<leader>sS", "<cmd>Telescope git_stash<cr>", desc = "Git stash" },
  { "<leader>sb", "<cmd>Telescope buffers<cr>", desc = "Buffers" },
  { "<leader>sn", "<cmd>Telescope current_buffer_fuzzy_find<cr>", desc = "[N]ow buffer" },

  { "<leader>sd", group = "+DAP" },
  { "<leader>sdc", "<cmd>Telescope dap commands<cr>", desc = "Dap Commands" },
  { "<leader>sdb", "<cmd>Telescope dap list_breakpoints<cr>", desc = "Dap Breakpoints" },
  { "<leader>sdg", "<cmd>Telescope dap configurations<cr>", desc = "Dap Configurations" },
  { "<leader>sdv", "<cmd>Telescope dap variables<cr>", desc = "Dap Variables" },
  { "<leader>sdf", "<cmd>Telescope dap frames<cr>", desc = "Dap Frames" },

  { "<leader>g", group = "+Git" },
  { "<leader>gk", "<cmd>lua require 'gitsigns'.prev_hunk({navigation_message = false})<cr>", desc = "Prev Hunk" },
  { "<leader>gl", "<cmd>lua require 'gitsigns'.blame_line()<cr>", desc = "Blame" },
  { "<leader>gp", "<cmd>lua require 'gitsigns'.preview_hunk()<cr>", desc = "Preview Hunk" },
  { "<leader>gr", "<cmd>lua require 'gitsigns'.reset_hunk()<cr>", desc = "Reset Hunk" },
  { "<leader>gR", "<cmd>lua require 'gitsigns'.reset_buffer()<cr>", desc = "Reset Buffer" },
  { "<leader>gj", "<cmd>lua require 'gitsigns'.next_hunk({navigation_message = false})<cr>", desc = "Next Hunk" },
  { "<leader>gs", "<cmd>lua require 'gitsigns'.stage_hunk()<cr>", desc = "Stage Hunk" },
  { "<leader>gu", "<cmd>lua require 'gitsigns'.undo_stage_hunk()<cr>", desc = "Undo Stage Hunk" },
  { "<leader>go", require("telescope.builtin").git_status, desc = "Open changed file" },
  { "<leader>gb", require("telescope.builtin").git_branches, desc = "Checkout branch" },
  { "<leader>gc", require("telescope.builtin").git_commits, desc = "Checkout commit" },
  { "<leader>gC", require("telescope.builtin").git_bcommits, desc = "Checkout commit(for current file)" },
  { "<leader>gd", "<cmd>Gitsigns diffthis HEAD<cr>", desc = "Git Diff" },
  { "<leader>gU", ":UndotreeToggle<CR>", desc = "Toggle UndoTree" },
  { "<leader>gn", "<cmd>Neogit kind=vsplit<cr>", desc = "Start a floating window with Neogit" },

  { "<leader>l", desc = "+LSP" },
  { "<leader>la", vim.lsp.buf.code_action, desc = "Code Action" },
  { "<leader>ls", vim.lsp.buf.signature_help, desc = "Display Signature Information" },
  { "<leader>lr", vim.lsp.buf.rename, desc = "Rename all references" },
  { "<leader>lf", vim.lsp.buf.format, desc = "Format" },
  { "<leader>li", require("telescope.builtin").lsp_implementations, desc = "Implementation" },
  { "<leader>ll", "<cmd>TroubleToggle document_diagnostics<cr>", desc = "Document Diagnostics (Trouble)" },
  { "<leader>lL", "<cmd>TroubleToggle workspace_diagnostics<cr>", desc = "Workspace Diagnostics (Trouble)" },
  { "<leader>lw", require("telescope.builtin").diagnostics, desc = "Diagnostics" },

  { "<leader>lW", group = "+Workspace" },
  { "<leader>lWa", vim.lsp.buf.add_workspace_folder, desc = "Add Folder" },
  { "<leader>lWr", vim.lsp.buf.remove_workspace_folder, desc = "Remove Folder" },
  { "<leader>lWl", function() print(vim.inspect(vim.lsp.buf.list_workspace_folders())) end, desc = "List Folders" },

  { "<leader>t", group = "+Todo" },
  { "<leader>tt", "<cmd>TodoTelescope<cr>", desc = "Todo" },
  { "<leader>tT", "<cmd>TodoTelescope keywords=TODO,FIX,FIXME<cr>", desc = "Todo/Fix/Fixme" },
  { "<leader>tx", "<cmd>TodoTrouble<cr>", desc = "Todo (Trouble)" },
  { "<leader>tX", "<cmd>TodoTrouble keywords=TODO,FIX,FIXME<cr><cr>", desc = "Todo/Fix/Fixme (Trouble)" },
  
  { "<leader>d", group = "Debug" },
  { "<leader>db", require("dap").toggle_breakpoint, desc = "Breakpoint" },
  { "<leader>dc", require("dap").continue, desc = "Continue" },
  { "<leader>di", require("dap").step_into, desc = "Into" },
  { "<leader>do", require("dap").step_over, desc = "Over" },
  { "<leader>dO", require("dap").step_out, desc = "Out" },
  { "<leader>dr", require("dap").repl.toggle, desc = "Repl" },
  { "<leader>dl", require("dap").run_last, desc = "Last" },
  { "<leader>du", require("dapui").toggle, desc = "UI" },
  { "<leader>dx", require("dap").terminate, desc = "Exit" },
}
